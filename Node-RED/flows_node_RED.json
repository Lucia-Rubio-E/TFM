[
    {
        "id": "6991dd8128d6647b",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1e64f112839dceb",
        "type": "function",
        "z": "6991dd8128d6647b",
        "name": "function JSON data ( anchor + tag)",
        "func": "const processPayload = async (payload) => {\n  const messages = [];\n\n  if (payload[0] && payload[0].mac_anchor) {\n    // anchor en la tabla devices\n    payload.forEach(data => {\n      messages.push({\n        query: `\n          INSERT INTO devices (mac, id_type, positionx, positiony)\n          VALUES ($1, $2, $3, $4)\n          ON CONFLICT (mac) DO UPDATE\n          SET positionx = EXCLUDED.positionx,\n            positiony = EXCLUDED.positiony;\n        `,\n        params: [\n          data.mac_anchor,\n          1, // id_type = 1 para los nodos anchors\n          data.positionx,\n          data.positiony\n        ]\n      });\n    });\n\n  } else if (payload[0] && payload[0].mac_src && payload[0].mac_dst) {\n    for (const data of payload) {\n      // se añaden los datos si la mac_src en la tabla devices si no existe\n      messages.push({\n        query: `\n          INSERT INTO devices (mac, id_type)\n          VALUES ($1, 2) -- id_type = 2 para los nodos tags\n          ON CONFLICT (mac) DO NOTHING;\n        `,\n        params: [data.mac_src]\n      });\n\n      // se añaden los datos si la mac_dst en la tabla devices si no existe\n      messages.push({\n        query: `\n          INSERT INTO devices (mac, id_type)\n          VALUES ($1, 1) -- id_type = 1 para los nodos anchors \n          ON CONFLICT (mac) DO NOTHING;\n        `,\n        params: [data.mac_dst]\n      });\n\n      // se consulta el id correspondiente a mac_src\n      messages.push({\n        query: `\n          SELECT id FROM devices WHERE mac = $1;\n        `,\n        params: [data.mac_src],\n        result: 'id_src'\n      });\n\n      // se consulta el id correspondiente a mac_dst\n      messages.push({\n        query: `\n          SELECT id FROM devices WHERE mac = $1;\n        `,\n        params: [data.mac_dst],\n        result: 'id_dst'\n      });\n\n      // se insertan los datos en la tabla data_tag utilizando los id obtenidos\n      messages.push({\n        query: `\n          INSERT INTO data_tag (id_src, id_dst, distance_cm, rtt_ns)\n          VALUES (\n            (SELECT id FROM devices WHERE mac = $1),\n            (SELECT id FROM devices WHERE mac = $2),\n            $3::double precision, \n            $4::double precision\n          );\n        `,\n        params: [\n          data.mac_src,\n          data.mac_dst,\n          data.distance_cm,\n          data.rtt_ns\n        ]\n      });\n    }\n  } else {\n    // el JSON no sigue ninguna estructura\n    node.error(\"Formato de JSON no reconocido\", msg);\n    return null;\n  }\n\n  return [messages];\n};\n\nreturn processPayload(msg.payload);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "881de5214543a1e8"
            ]
        ]
    },
    {
        "id": "d730a45fd11e3255",
        "type": "mqtt in",
        "z": "6991dd8128d6647b",
        "name": "",
        "topic": "data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "225082df4f021499",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 370,
        "y": 320,
        "wires": [
            [
                "60d65892d778b0ac",
                "f1e64f112839dceb"
            ]
        ]
    },
    {
        "id": "881de5214543a1e8",
        "type": "postgresql",
        "z": "6991dd8128d6647b",
        "name": "postgreSQL",
        "query": "",
        "postgreSQLConfig": "67cf6152c7ed6dc3",
        "split": false,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 870,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "60d65892d778b0ac",
        "type": "debug",
        "z": "6991dd8128d6647b",
        "name": "salida DATA",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 580,
        "y": 240,
        "wires": []
    },
    {
        "id": "225082df4f021499",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "67cf6152c7ed6dc3",
        "type": "postgreSQLConfig",
        "name": "server",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres2",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "lucia",
        "passwordFieldType": "str"
    }
]